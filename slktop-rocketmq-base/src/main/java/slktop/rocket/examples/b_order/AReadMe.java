package slktop.rocket.examples.b_order;

/**
 * 消费者安装消息发送的顺序消费消息(FIFO)
 * RocketMQ可以严格的保证消息有序，可以分为分区有序或者全局有序。
 * <p>
 * 顺序消费的原理: 在默认的情况下消息发送会采取Round Robin轮询方式把消息发送到不同的queue(分区队列)；
 * 而消费消息的时候从多个queue上拉取消息，这种情况发送和消费是不能保证顺序。
 * <p>
 * (((但是如果控制发送的顺序消息只依次发送到同一个queue中，消费的时候只从这个queue上依次拉取，则就保证了顺序。)))
 * <p>
 * 当发送和消费参与的queue只有一个，则是全局有序；如果多个queue参与，则为分区有序，
 * 即相对每个queue，消息都是有序的。
 * <p>
 * 下面用订单进行分区有序的示例。
 * 一个订单的顺序流程是：创建、付款、推送、完成。
 * 订单号相同的消息会被先后发送到同一个队列中，消费时，同一个OrderId获取到的肯定是同一个队列。
 */
public class AReadMe {
}
